import paramiko
import time


def execute_command_on_vm(hostname, port, username, password, command1, command2):

    # Step 1: SSH Connection
    client = paramiko.SSHClient()
    client.load_system_host_keys()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:

        # Connect to the remote server
        client.connect(hostname, port, username, password)

        # Step 2: Retrieve File Names And Name Commands
        remote_dir = '~/protodiff/data/ssl/20220421_163040_openssl-1.0.2h-libressl-2.4.0-update-1_tgt-0_all/testcases'

        command_end = '; echo $?'

        # Execute 'ls' command to list files in the remote directory
        stdin, stdout, stderr = client.exec_command(f'ls {remote_dir}')

        # Read the output of the command
        file_names = stdout.read().decode().splitlines()

        # Open a shell to interact with the terminal
        ssh_shell = client.invoke_shell()

        # Step 3: Work With Files
        for file_name in file_names:
            full = 'data/ssl/20220421_163040_openssl-1.0.2h-libressl-2.4.0-update-1_tgt-0_all/testcases' + file_name

            # Send command1 to the terminal
            ssh_shell.send(command1 + full + command_end + "\n")

            # Wait for a short time to allow the command to execute
            # You may adjust this value depending on the response time of your VM
            time.sleep(0.1)

            # Receive and print the command output
            output1 = ssh_shell.recv(4096).decode()
            print(output1)

            # Send command2 to the terminal
            ssh_shell.send(command2 + full + command_end + "\n")

            # Wait for a short time to allow the command to execute
            # You may adjust this value depending on the response time of your VM
            time.sleep(1)

            # Receive and print the command output
            output2 = ssh_shell.recv(4096).decode()
            print(output2)

            if output1 != output2:
                print(full)

        ssh_shell.close()
        client.close()

    except paramiko.AuthenticationException:
        print("Authentication failed.")
    except paramiko.SSHException as e:
        print("Error occurred during SSH connection:", e)


if __name__ == "__main__":

    hostname = '10.99.0.89'
    port = 22
    username = 'vmuser'
    password = 'vmuser'
    command1 = 'build/xz/clamav-0.99.2/clamav-0.99.2-xz'
    command2 = 'build/xz/xz-5.2.2/xz-5.2.2 -dkc'
    execute_command_on_vm(hostname, port, username, password, command1, command2)